/*

Stylesheet that mimicks, to a certain extent, the Mapquest US style from http://github.com/MapQuest/MapQuest-Mapnik-Style
        Andy Allan, August 2010

	Based heavily on:
	MapCSS demonstration stylesheet
	Richard Fairhurst, October 2009
	
*/

/* This rule applies to all areas (closed ways). Note that rules are applied in the order
  they appear in the file, so later rules may replace this one for some ways.
  This is used as a debugger for finding unstyled areas; it's obviously oversimplistic since
  it picks up closed-loop highways. */

/* way :area { color: red; width: 1; fill-color: red; fill-opacity: 0.5; } */

/* A set of fairly standard rules.
  We use z-index to make sure high-priority roads appear above minor ones.
  The default z-index is 5. If an object matches multiple rules with the same
  z-index then the rules are "merged" (but individual properties become one or the other)  */

way[highway=motorway],way[highway=motorway_link],
way[highway=trunk],way[highway=trunk_link],
way[highway=primary],way[highway=primary_link],
way[highway=secondary],way[highway=secondary_link],
way[highway=tertiary],way[highway=tertiary_link],
way[highway=residential]                             { text: name; text-color: black; font-size: 10; text-position: line; text-halo-color: white; text-halo-radius: 2; }
way[highway=motorway]                               { z-index: 9; color: #6c91d9; width: 5; casing-color: #495f8c; casing-width: 8; }
way[highway=motorway]                               { z-index: 10; color: #d3dbeb; width: 2; } /* centerline */
way[highway=motorway_link]                           { z-index: 9; color: #dcbf95; width: 3; casing-color: #b89e7d; casing-width: 5; }
way[highway=trunk],way[highway=trunk_link],          /* these are combined in the MapQuest style, so will be hard to distinguish when editing */
way[highway=primary],way[highway=primary_link]      { z-index: 8; color: #f5d290; width: 4; casing-color: #d0a14a; casing-width: 6; }
way[highway=secondary],way[highway=secondary_link]  { z-index: 7; color: #f6f0a3; width: 4; casing-color: #ccad70; casing-width: 6; }
way[highway=tertiary],way[highway=tertiary_link],
way[highway=unclassified],way[highway=unclassified_link],
way[highway=residential],way[highway=residential_link],
way[highway=service],way[highway=road]               { color: #ffffff; width: 4; casing-color: #b3b1b2; casing-width: 6; }

/* Pedestrian precincts need to be treated carefully. Only closed-loops with an explicit
area=yes tag should be filled. The below doesn't yet work as intended. */
way[highway=pedestrian] !:area { color: #ddddee; width: 5; casing-color: #555555; casing-width: 6; }
way[highway=pedestrian] :area  { color: #555555; width: 1; fill-color: #ddddee; fill-opacity: 0.8; }


way[highway=path],way[highway=pedestrian],
way[highway=footway],way[highway=track]      { color: #808040; width: 1.5; }

way[waterway=river], way[waterway=canal] { color: blue; width: 2; text:name; text-color:blue; font-size:9; text-position: offset; text-offset: 7;}

way[barrier] {color: #000000; width: 1}

/* Fills can be solid colour or bitmap images */



/* way[natural=water],way[waterway] :area                          { fill-image: mapquest/mapquest_inc/water.png; } *//* FIXME doesn't work */
way[natural=water],way[waterway] :area                         { fill-color: #cce7ff; fill-opacity: 0.7; }
way[leisure=park],way[leisure=playground],
way[landuse=recreation_ground],
way[leisure=nature_reserve],[leisure=common],
way[leisure=pitch]                          { width: 0; fill-color: #00a635; fill-opacity: 0.2; }
way[building=yes]                           { width: 0; fill-color: #999999; fill-opacity: 0.4; }

/* Addressing. Nodes with addresses *and* match POIs should have a poi icon, so we put addressing first */ 

node[addr:housenumber],
node[addr:housename] { icon-image: circle; icon-width: 4; color: #B0E0E6; casing-color:blue; casing-width: 1; }
way[addr:interpolation] { color: #B0E0E6; width: 3; dashes: 3,3;}

/* POIs, too, can have bitmap icons - they can even be transparent */

node[place] { icon-image: icons/place.png; text-offset: 17; font-family: DejaVu; text: name; font-size: 9; font-weight: bold; text-decoration: underline; z-index: 20; }
node[amenity=telephone] { icon-image: icons/telephone.png; z-index: 20; }
node[barrier=cattle_grid] { icon-image: icons/cattle_grid.png; z-index: 20; }

node[tourism=guesthouse] { icon-image: icons/accommodation_bed_and_breakfast.n.16.png; z-index: 20; }
node[tourism=camp_site] { icon-image: icons/accommodation_camping.n.16.png; z-index: 20; }
node[tourism=caravan_site] { icon-image: icons/accommodation_caravan_park.n.16.png; z-index: 20; }
node[tourism=hotel] { icon-image: icons/accommodation_hotel.n.16.png; text-offset:15; text: name; z-index: 20; }
node[tourism=hostel] { icon-image: icons/accommodation_youth_hostel.n.16.png; z-index: 20; }
node[amenity=fire_station] { icon-image: icons/amenity_firestation2.n.16.png; z-index: 20; }
node[amenity=police] { icon-image: icons/amenity_police2.n.16.png; z-index: 20; }
node[amenity=post_box] { icon-image: icons/amenity_post_box.n.16.png; z-index: 20; }
node[amenity=recycling] { icon-image: icons/amenity_recycling.n.16.png; z-index: 20; }
node[barrier=bollard] { icon-image: icons/barrier_bollard.n.16.png; z-index: 20; }
node[barrier=gate], node[highway=gate] { icon-image: icons/gate.png; z-index: 20; }
node[barrier=toll_booth] { icon-image: icons/barrier_toll_booth.n.16.png; z-index: 20; }
node[amenity=school] { icon-image: icons/education_school.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=bar] { icon-image: icons/food_bar.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=cafe] { icon-image: icons/food_cafe.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=fast_food] { icon-image: icons/food_fastfood.n.16.png; z-index: 20; }
node[amenity=pub] { icon-image: icons/food_pub.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=restaurant] { icon-image: icons/food_restaurant.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=hospital] { icon-image: icons/health_hospital.n.16.png; z-index: 20; }
node[amenity=pharmacy] { icon-image: icons/health_pharmacy.n.16.png; z-index: 20; }
node[amenity=atm] { icon-image: icons/money_atm.n.16.png; z-index: 20; }
node[amenity=bank] { icon-image: icons/money_bank2.n.16.png; z-index: 20; }
node[shop=alcohol] { icon-image: icons/shopping_alcohol.n.16.png; z-index: 20; }
node[shop=bakery] { icon-image: icons/shopping_bakery.n.16.png; z-index: 20; }
node[shop=bicycle] { icon-image: icons/shopping_bicycle.n.16.png; z-index: 20; }
node[shop=book] { icon-image: icons/shopping_book.n.16.png; z-index: 20; }
node[shop=butcher] { icon-image: icons/shopping_butcher.n.16.png; z-index: 20; }
node[shop=car_repair] { icon-image: icons/shopping_car_repair.n.16.png; z-index: 20; }
node[shop=car] { icon-image: icons/shopping_car.n.16.png; z-index: 20; }
node[shop=clothes] { icon-image: icons/shopping_clothes.n.16.png; z-index: 20; }
node[shop=confectionery] { icon-image: icons/shopping_confectionery.n.16.png; z-index: 20; }
node[shop=convenience] { icon-image: icons/shopping_convenience.n.16.png; z-index: 20; }
node[shop=doityourself] { icon-image: icons/shopping_diy.n.16.png; z-index: 20; }
node[shop=fishmonger] { icon-image: icons/shopping_fish.n.16.png; z-index: 20; }
node[shop=garden_centre] { icon-image: icons/shopping_garden_centre.n.16.png; z-index: 20; }
node[shop=gift] { icon-image: icons/shopping_gift.n.16.png; z-index: 20; }
node[shop=greengrocer] { icon-image: icons/shopping_greengrocer.n.16.png; z-index: 20; }
node[shop=hairdresser] { icon-image: icons/shopping_hairdresser.n.16.png; z-index: 20; }
node[shop=hifi] { icon-image: icons/shopping_hifi.n.16.png; z-index: 20; }
node[shop=jewelry] { icon-image: icons/shopping_jewelry.n.16.png; z-index: 20; }
node[shop=laundry] { icon-image: icons/shopping_laundrette.n.16.png; z-index: 20; }
node[shop=motorcycle] { icon-image: icons/shopping_motorcycle.n.16.png; z-index: 20; }
node[shop=music] { icon-image: icons/shopping_music.n.16.png; z-index: 20; }
node[shop=supermarket] { icon-image: icons/shopping_supermarket.n.16.png; z-index: 20; }
node[historic=archaeological_site] { icon-image: icons/tourist_archaeological.n.16.png; z-index: 20; }
node[historic=battlefield] { icon-image: icons/tourist_battlefield.n.16.png; z-index: 20; }
node[historic=castle] { icon-image: icons/tourist_castle.n.16.png; text-offset:15; text: name; z-index: 20; }
node[amenity=cinema] { icon-image: icons/tourist_cinema.n.16.png; z-index: 20; }
node[historic=memorial] { icon-image: icons/tourist_memorial.n.16.png; text-offset:15; text: name; z-index: 20; }
node[historic=monument] { icon-image: icons/tourist_monument.n.16.png; text-offset:15; text: name; z-index: 20; }
node[tourism=museum] { icon-image: icons/tourist_museum.n.16.png; text-offset:15; text: name; z-index: 20; }
node[tourism=picnic_site] { icon-image: icons/tourist_picnic.n.16.png; z-index: 20; }
node[historic=ruin] { icon-image: icons/tourist_ruin.n.16.png; z-index: 20; }
node[amenity=theatre] { icon-image: icons/tourist_theatre.n.16.png; z-index: 20; }
node[tourism=viewpoint] { icon-image: icons/tourist_view_point.n.16.png; z-index: 20; }
node[tourism=zoo] { icon-image: icons/tourist_zoo.n.16.png; z-index: 20; }
node[aeroway=aerodrome] { icon-image: icons/transport_aerodrome.n.16.png; z-index: 20; }
node[amenity=bus_station] { icon-image: icons/transport_bus_station.n.16.png; z-index: 20; }
node[highway=bus_stop] { icon-image: icons/transport_bus_stop2.n.16.png; z-index: 20; }
node[amenity=fuel] { icon-image: icons/transport_fuel.n.16.png; z-index: 20; }
node[amenity=bicycle_parking] { icon-image: icons/transport_parking_bicycle.n.16.png; text-offset: 15; text: capacity; z-index: 20; }
node[amenity=parking] { icon-image: icons/transport_parking_car.n.16.png; z-index: 20; }
node[amenity=ferry_terminal] { icon-image: icons/transport_port.n.16.png; z-index: 20; }
node[amenity=bicycle_rental] { icon-image: icons/transport_rental_bicycle.n.16.png; z-index: 20; }
node[amenity=car_rental] { icon-image: icons/transport_rental_car.n.16.png; z-index: 20; }
node[amenity=taxi] { icon-image: icons/transport_taxi_rank.n.16.png; z-index: 20; }
node[railway=station] { icon-image: icons/transport_train_station.n.16.png; text-offset:15; text: name; z-index: 20; }
node[railway=tram_stop] { icon-image: icons/transport_tram_stop.n.16.png; z-index: 20; }



/* We can stack styles at different z-index (depth) */

way[railway=rail],way[railway=subway],way[railway=light_rail],way[railway=monorail]
    { z-index: 6; color: #afafaf; width: 3; }
    { z-index: 7; color: #ffffff; width: 1.5; dashes: 5,4; }
way[railway=platform] { color:black; width: 2; }

/* Bridge */
way[bridge=yes], way[bridge=viaduct], way[bridge=suspension]
    { z-index: 3; color: black; width: eval('_width+3'); }

/* Oneway */
/*way[oneway=yes] { z-index: 10; color: #444444; width: 3; dashes: 15,25; line-style: arrows; }*/


/* Change the road colour based on dynamically set "highlighted" tag (see earlier) */

way .highlighted { color: pink; }

/* Interactive editors may choose different behaviour when a user mouses-over or selects
   an object. Potlatch 2 supports these but the stand-alone Halcyon viewer does not */

way :hover	{ z-index: 2; width: eval('_width+10'); color: #ffff99; }
way :selected { z-index: 2; width: eval('_width+10'); color: yellow; opacity: 0.7;}
way :restrictfrom { z-index: -1; width: eval('_width+10'); color: red; opacity: 0.7;}
way :restrictto { z-index: -1; width: eval('_width+10'); color: blue; opacity: 0.7;}
way !:drawn { z-index:10; width: 0.5; color: gray; }
way :tiger { casing-color: #ff00ff;}

relation[type=restriction] node { z-index:11; icon-image: icons/restriction.png; }

node :dupe { z-index: 9; icon-image: circle; icon-width:8; color: white; opacity: 0.4; casing-opacity: 0.4; casing-color: red; casing-width: 3; }
node :hoverway { z-index: 9; icon-image: square; icon-width: 7; color: blue; }
node !:drawn :poi { z-index: 2; icon-image: circle; icon-width: 4; color: green; casing-color: black; casing-width: 1; }
node !:drawn :hasTags { z-index: 9; icon-image: circle; icon-width: 4; color: black; }
node :hasTags :selectedway { z-index: 9; icon-image: square; icon-width: 8; color: black; }
node !:drawn :selectedway { z-index: 9; icon-image: square; icon-width: 8; color: red; casing-color: #cc0000; casing-width: 1;}
node :selected { z-index: 1; icon-image: square; icon-width: eval('_width+10'); color: yellow; interactive: no; }
node :junction :selectedway { z-index: 8; icon-image: square; icon-width: 12; casing-color: black; casing-width: 1; }
	
/* Descendant selectors provide an easy way to style relations: this example means "any way
   which is part of a relation whose type=route". */

relation[type=route] way { z-index: 1; width: 14; color: orange; opacity: 0.3; }



